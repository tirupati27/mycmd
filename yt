#!/bin/bash
# List of preferred directories to save downloads
# Modify this list to include directories that exist on your system
dir_preference=(
    "/storage/emulated/0"
    "/mnt/c/Users/Tirupati Bala/Desktop"
)
# ================================================================
# Aim          : A simple script to download Videos or Audio from YouTube using yt-dlp.
#                The script prompts the user for a Video URL and desired format,
#                then uses yt-dlp to download the content accordingly.
# ================================================================

# Exit the script if yt-dlp is not installed
if ! command -v yt-dlp &> /dev/null; then
    echo "❌ yt-dlp is not installed. Please install it first."
    exit 1
fi

# ===============================================================
# Find the first existing directory from the preferred list to save downloads there
FIRST_EXISTING_DIR=""
for dir in "${dir_preference[@]}"; do
    if [ -d "$dir" ]; then      # Check if directory exists
        FIRST_EXISTING_DIR="$dir"
        break                   # Exit loop after finding the first existing directory
    fi
done
# Exit the script if no directory exists
if [ -z "$FIRST_EXISTING_DIR" ]; then
    echo "❌ None of the directories exist to save downloads."
    echo -e "Please modify the script \033[32m$MYCMD/yt\033[0m to include an existing directory."
    exit 1
fi
cd "$FIRST_EXISTING_DIR"
# ===============================================================
# Defining a function for colored text output
color() {
    if [[ "$1" == "red" ]]; then
        echo -e "\033[31m$2\033[0m"  # Red color
    elif [[ "$1" == "green" ]]; then
        echo -e "\033[32m$2\033[0m"  # Green color
    elif [[ "$1" == "yellow" ]]; then
        echo -e "\033[33m$2\033[0m"  # Yellow color
    elif [[ "$1" == "blue" ]]; then
        echo -e "\033[34m$2\033[0m"  # Blue color
    elif [[ "$1" == "magenta" ]]; then
        echo -e "\033[1;35m$2\033[0m"  # Magenta color
    elif [[ "$1" == "cyan" ]]; then
        echo -e "\033[36m$2\033[0m"  # Cyan color
    else
        echo "$2"                    # No color
    fi
}
# Defining a function to handle exit on 'exit' input
handle_exit() {
    if [[ "$1" == "exit" ]]; then
        echo "$(color cyan "Exiting the script.")"
        exit 0
    fi
}

# ===============================================================
# Parsing the CLI arguments to choose the download type
# Function to show usage
usage() {
    echo "Usage: yt <flag> <url>"
    echo "Flags:"
    echo "  -v,  --video         : Download video"
    echo "  -a,  --audio         : Download audio"
    echo "  -ac, --audio-clip    : Download audio clip"
    echo "  -vc, --video-clip    : Download video clip"
    exit 1
}
# Check if exactly 2 arguments are provided
if [ $# -ne 2 ]; then
    echo "Error: Invalid number of arguments."
    usage
fi

FLAG="$1"
url="$2"

case "$FLAG" in
    -v|--video)
        clear && echo "Selected option: Video"
        choice="video"
        ;;
    -a|--audio)
        clear && echo "Selected option: Audio"
        choice="audio"
        ;;
    -ac|--audio-clip)
        clear && echo "Selected option: Audio-clip"
        choice="audio-clip"
        ;;
    -vc|--video-clip)
        clear && echo "Selected option: Video-clip"
        choice="video-clip"
        ;;
    *)
        echo "Error: Invalid flag '$FLAG'"
        usage
        ;;
esac

# ===============================================================
# Showing the Video information to the user to help them choose the format
echo "$(color yellow "fetching download information...")"
yt-dlp -F "$url"
# If the above command fails, exit the script
if [ $? -ne 0 ]; then
    exit 1
fi
echo -e "\n$(color magenta Note:) Type 'exit' in any prompt to quit the script."
fileName_pattern="%(title)s_%(id)s_%(resolution)s"     # Pattern for naming of downloaded files

# ===============================================================
if [[ "$choice" == "video" ]]; then
    read -p "$(color magenta "Enter the format code for Video (e.g. 18 or 137+140 or bv+ba):") " format_code
    handle_exit "$format_code"
    # The '\' is line continuation character in bash, allowing a command to span multiple lines for better readability.
    yt-dlp \
    -f "$format_code" \
    -o "$fileName_pattern" \
    --merge-output-format mp4 \
    --embed-thumbnail \
    --no-playlist \
    --retries infinite \
    --fragment-retries 10 \
    "$url"
# ===============================================================

elif [[ "$choice" == "audio" ]]; then
    read -p "$(color magenta "Enter the format code for Audio (e.g. 140 or ba):") " format_code
    handle_exit "$format_code"
    # yt-dlp command to download Audio
    yt-dlp \
    -f "$format_code" \
    -o "$fileName_pattern" \
    --extract-audio \
    --embed-thumbnail \
    --no-playlist \
    --retries infinite \
    --fragment-retries 10 \
    "$url"
# ===============================================================

elif [[ "$choice" == "video-clip" ]]; then
    read -p "$(color magenta "Enter the clip timing range (e.g., 00:01:30-00:02:45):") " time_range
    handle_exit "$time_range"
    read -p "$(color magenta "Enter the format code for Video (e.g. 18 or 137+140 or bv+ba):") " format_code
    handle_exit "$format_code"
    # yt-dlp command to download Video clips
    yt-dlp \
    -f "$format_code" \
    -o "$fileName_pattern" \
    --merge-output-format mp4 \
    --download-sections "*$time_range" \
    --force-keyframes-at-cuts \
    --embed-thumbnail \
    --no-playlist \
    --retries infinite \
    --fragment-retries 10 \
    "$url"
# ===============================================================

elif [[ "$choice" == "audio-clip" ]]; then
    read -p "$(color magenta "Enter the clip timing range (e.g., 00:01:30-00:02:45):") " time_range
    handle_exit "$time_range"
    read -p "$(color magenta "Enter the format code for Audio (e.g. 140 or ba):") " format_code
    handle_exit "$format_code"
    # yt-dlp command to download Audio clips
    yt-dlp \
    -f "$format_code" \
    -o "$fileName_pattern.mp3" \
    --extract-audio \
    --download-sections "*$time_range" \
    --force-keyframes-at-cuts \
    --embed-thumbnail \
    --no-playlist \
    --retries infinite \
    --fragment-retries 10 \
    "$url"
# ===============================================================
fi