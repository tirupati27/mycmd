#!/bin/bash
# Author       : Tirupati Bala
# Date         : 25th september 2025
# ================================================================
# Aim          : A simple script to download Videos or Audio from YouTube using yt-dlp.
#                The script provides options to download video, audio, video clip or audio clip.
#                It also allows users to choose the quality of download by specifying format codes.
#                The script is designed to be user-friendly and works in Termux on Android as well
#                as in Linux environments.
# Requirements : yt-dlp must be installed and accessible in the system PATH.
# ================================================================



# Modify the below list to include directories where you want to save downloads
# The script will use the first existing directory from this list
dir_preference=(
    "/storage/emulated/0"
    "/mnt/c/Users/Tirupati Bala/Desktop"
)



# ===============================================================
# 1. User-defined functions
# ===============================================================
# function for debugging
show_debugInfo_and_exit() {
    echo "----------------------------------------"
    echo "Debug Info:"
    echo "----------------------------------------"
    echo "OS                  :  $(uname -a)"
    echo "User                :  $USER"
    echo "Current directory   :  $(pwd)"
    echo "yt-dlp version      :  $(yt-dlp --version)"
    echo "Downloading from URL:  $URL"
    echo "Saving download to  :  $FIRST_EXISTING_DIR"
    echo "choice              :  $CHOICE"
    echo "Using format code   :  $FORMAT_CODE"
    echo "Show formats        :  $SHOW_FORMATS"
    echo "Time-range          :  $time_range"
    echo "File name pattern   :  $fileName_pattern"
    echo "----------------------------------------"
    echo "Full yt-dlp command :  $1"
    echo "----------------------------------------"
    exit 0
}
# function for colored text output
color() {
    if [[ "$1" == "red" ]]; then
        echo -e "\033[31m$2\033[0m"  # Red color
    elif [[ "$1" == "green" ]]; then
        echo -e "\033[32m$2\033[0m"  # Green color
    elif [[ "$1" == "yellow" ]]; then
        echo -e "\033[33m$2\033[0m"  # Yellow color
    elif [[ "$1" == "blue" ]]; then
        echo -e "\033[34m$2\033[0m"  # Blue color
    elif [[ "$1" == "magenta" ]]; then
        echo -e "\033[1;35m$2\033[0m"  # Magenta color
    elif [[ "$1" == "cyan" ]]; then
        echo -e "\033[36m$2\033[0m"  # Cyan color
    else
        echo "$2"                    # No color
    fi
}
# function to handle exit when user types 'exit' in any prompt
handle_exit() {
    if [[ "$1" == "exit" ]]; then
        echo "$(color cyan "Exiting the script.")"
        exit 0
    fi
}
# function to prompt user for format code based on choice
# download_choice <prompt_help_text> <FORMAT_CODE>
# e.g. download_choice "[e.g. 18 or 137+140 or bv+ba]" "bv+ba"
download_choice() {
    clear
    echo "$(color green "Your download choice") :  $CHOICE"
    echo "$(color green "Download Save to")   :  $FIRST_EXISTING_DIR"
    if [[ "$SHOW_FORMATS" == true ]]; then
        echo "$(color yellow "fetching download information...")"
        yt-dlp -F "$URL"
        [ $? -ne 0 ] && exit 1  # If the above command fails, exit the script
        echo -e "\n$(color magenta Note:) Type 'exit' in any prompt to quit the script."
        read -p "$(color magenta "Enter the format code for $CHOICE") $1: " FORMAT_CODE
        handle_exit "$FORMAT_CODE"
        # for empty input, set FORMAT_CODE to best available format
        if [[ -z "$FORMAT_CODE" ]]; then
            FORMAT_CODE="$2"
            echo "$(color yellow "No format code entered. Downloading best available quality [format code: $FORMAT_CODE].")"
        fi
    else
        FORMAT_CODE="$2"
        echo "$(color green "Choosen quality") :  best available quality [format code: $FORMAT_CODE]"
    fi
}

# ===============================================================
# 2. Parsing the CLI arguments
# ===============================================================
# printUsage_and_exit <exit_code> <error_message>
printUsage_and_exit() {
    if [[ -n "$2" ]]; then
        echo "❌Error: $2"
    fi
    echo "Usage: yt <flag> <url> [--best] [--debug]"
    echo -e "\nFlags:"
    echo "  -v,  --video         : Download video"
    echo "  -a,  --audio         : Download audio"
    echo "  -ac, --audio-clip    : Download audio clip"
    echo "  -vc, --video-clip    : Download video clip"
    echo "  --best               : (Optional) Download best available format directly, without showing format list"
    echo "  --debug              : (Optional) instead of downloading, show debug info and full yt-dlp command"
    echo "  --help               : Show this help message and exit"
    echo -e "\nExamples:"
    echo '  "yt -v --best https://www.youtube.com/watch?v=example"'
    echo '  "yt -v --best https://www.youtube.com/watch?v=example --debug"'
    echo '  "yt -vc https://www.youtube.com/watch?v=example"'
    echo '  "yt -ac https://www.youtube.com/watch?v=example --"'
    echo '  "yt --help"'
    exit "$1"
}
# Default values
CHOICE="NA"
SHOW_HELP=false
SHOW_FORMATS=true
URL="NA"
DEBUG_MODE=false
for arg in "$@"; do     # Iterate over all CLI arguments
    case "$arg" in
        -v|--video)
            CHOICE="video"
            ;;
        -a|--audio)
            CHOICE="audio"
            ;;
        -vc|--video-clip)
            CHOICE="video-clip"
            ;;
        -ac|--audio-clip)
            CHOICE="audio-clip"
            ;;
        --help)
            SHOW_HELP=true
            ;;
        --best)
            SHOW_FORMATS=false
            ;;
        http://*|https://*)
            URL="$arg"
            ;;
        --debug)
            DEBUG_MODE=true
            ;;
        *)
            printUsage_and_exit 1 "Unknown option $(color red "$arg")"
            ;;
    esac
done
# Check if required arguments are provided otherwise show usage and exit
if [[ "$SHOW_HELP" == true ]]; then
    # Ensure --help is only used alone e.g. "yt --help"
    if [[ $# -eq 1 && "$1" == "--help" ]]; then
        printUsage_and_exit 0
    else
        printUsage_and_exit 1 "$(color red "--help") cannot be combined with other arguments."
    fi
# CHOICE and URL are required arguments
elif [[ "$CHOICE" == "NA" || "$URL" == "NA" ]]; then
    printUsage_and_exit 1 "Both $(color red "<flag>") and $(color red "<url>") are required arguments."
fi

# ===============================================================
# 3. Main script logic
# ===============================================================

# step 1: Exit the script if yt-dlp is not installed
if ! command -v yt-dlp >/dev/null 2>&1; then
    echo "❌Error: yt-dlp is not installed. Please install it first."
    exit 1
fi

# step 2: Find the first existing directory from the preferred list to save downloads there
FIRST_EXISTING_DIR=""
for dir in "${dir_preference[@]}"; do
    if [ -d "$dir" ]; then
        FIRST_EXISTING_DIR="$dir"
        break
    fi
done
# Exit the script if no directory exists
if [ -z "$FIRST_EXISTING_DIR" ]; then
    echo "❌Error: None of the directories exist to save downloads."
    echo "Please modify the script $(color yellow "$MYCMD/yt") to include an existing directory."
    exit 1
fi
cd "$FIRST_EXISTING_DIR"

# step 3: Starting download based on user inputs
# till here, parsing of arguments is done and have valid user inputs ($CHOICE and $URL or $SHOW_FORMATS)
fileName_pattern="%(title)s_%(id)s_%(resolution)s"     # Pattern for naming of downloaded files

if [[ "$CHOICE" == "video" ]]; then
    download_choice "$(color green "[e.g. 18 or 137+140 or bv+ba]")" "bv+ba"
    echo "helo"
    show_debugInfo_and_exit

    # yt-dlp command to download Video
    yt-dlp \
    -f "$FORMAT_CODE" \
    -o "$fileName_pattern" \
    --merge-output-format mp4 \
    --embed-thumbnail \
    --no-playlist \
    --retries infinite \
    --fragment-retries 10 \
    "$URL"
# ===============================================================

elif [[ "$CHOICE" == "audio" ]]; then
    download_choice "[e.g. 140 or ba]" "ba"
    show_debugInfo_and_exit

    # yt-dlp command to download Audio
    yt-dlp \
    -f "$FORMAT_CODE" \
    -o "$fileName_pattern" \
    --extract-audio \
    --embed-thumbnail \
    --no-playlist \
    --retries infinite \
    --fragment-retries 10 \
    "$URL"
# ===============================================================

elif [[ "$CHOICE" == "video-clip" ]]; then
    echo -e "\n$(color magenta Note:) Type 'exit' in any prompt to quit the script."
    read -p "$(color magenta "Enter the $CHOICE timing range [e.g. 00:01:30-00:02:45]: ")" time_range
    handle_exit "$time_range"
    download_choice "[e.g. 18 or 137+140 or bv+ba]" "bv+ba"
    show_debugInfo_and_exit

    # yt-dlp command to download Video clips
    yt-dlp \
    -f "$FORMAT_CODE" \
    -o "$fileName_pattern" \
    --merge-output-format mp4 \
    --download-sections "*$time_range" \
    --force-keyframes-at-cuts \
    --embed-thumbnail \
    --no-playlist \
    --retries infinite \
    --fragment-retries 10 \
    "$URL"
# ===============================================================

elif [[ "$CHOICE" == "audio-clip" ]]; then
    echo -e "\n$(color magenta Note:) Type 'exit' in any prompt to quit the script."
    read -p "$(color magenta "Enter the $CHOICE timing range [e.g. 00:01:30-00:02:45]: ")" time_range
    handle_exit "$time_range"
    download_choice "[e.g. 140 or ba]" "ba"
    show_debugInfo_and_exit

    # yt-dlp command to download Audio clips
    yt-dlp \
    -f "$FORMAT_CODE" \
    -o "$fileName_pattern.mp3" \
    --extract-audio \
    --download-sections "*$time_range" \
    --force-keyframes-at-cuts \
    --embed-thumbnail \
    --no-playlist \
    --retries infinite \
    --fragment-retries 10 \
    "$URL"
# ===============================================================
fi